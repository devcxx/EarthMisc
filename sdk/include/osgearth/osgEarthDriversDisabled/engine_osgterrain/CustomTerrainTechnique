/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2013 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#ifndef OSGEARTH_ENGINE_OSGTERRAIN_EXTENDED_TERRAIN_TECHNIQUE
#define OSGEARTH_ENGINE_OSGTERRAIN_EXTENDED_TERRAIN_TECHNIQUE 1

#include "Common"
#include <osg/CopyOp>
#include <osg/NodeVisitor>
#include <osgEarth/Progress>

namespace osgEarth_engine_osgterrain
{
    using namespace osgEarth;

    class Tile;
    class TileUpdate;

    class TerrainTechnique : public osg::Object
    {
    public:
        virtual void init() =0;

        virtual void traverse( osg::NodeVisitor& nv ) =0;

        virtual void releaseGLObjects( osg::State* state ) const =0;

    protected:
        TerrainTechnique() : _tile(0L) { }

        TerrainTechnique( const TerrainTechnique& rhs, const osg::CopyOp& op ) : _tile(0L) { }

        /** dtor */
        virtual ~TerrainTechnique() { }

        Tile* _tile;

        friend class Tile;
    };

    class CustomTerrainTechnique : public TerrainTechnique
    {
    public:
        virtual void compile( const TileUpdate& updateSpec, ProgressCallback* progress ) =0;

        virtual bool applyTileUpdates() =0;

        virtual void setParentTile( class Tile* tile ) =0;

        virtual void setOptimizeTriangleOrientation( bool optimizeTriangleOrientation ) =0;

        virtual bool getOptimizeTriangleOrientation() const =0;


    protected:
        CustomTerrainTechnique() { }

        CustomTerrainTechnique( const CustomTerrainTechnique& rhs, const osg::CopyOp& op )
            : TerrainTechnique( rhs, op ) { }

        /** dtor */
        virtual ~CustomTerrainTechnique() { }
    };

} // namespace osgEarth_engine_osgterrain

#endif // OSGEARTH_ENGINE_OSGTERRAIN_EXTENDED_TERRAIN_TECHNIQUE
