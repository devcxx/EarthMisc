/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DROAM_ENGINE_CUBE_MANIFOLD_H
#define OSGEARTH_DROAM_ENGINE_CUBE_MANIFOLD_H 1

#include "Manifold"
#include "MeshManager"
#include "Diamond"
#include <osg/CoordinateSystemNode>
#include <osgEarth/Profile>

/** The top-level diamond layout for a round earth */
class CubeManifold : public Manifold
{
public:
    CubeManifold();

public:
    /** generate children up to the specified level */
    void seed( Level maxLevel );

    /** apply culling to the manifold. */
    void cull( osgUtil::CullVisitor* cv );

public: // Manifold overrides

    /** builds the base manifold mesh. */
    void initialize( MeshManager* mesh ); // override

    /** calculates the midpoint between two map coodinates */
    osg::Vec3d midpoint( const osg::Vec3d& mapCoord0, const osg::Vec3d& mapCoord1 ) const;

    /** calculates the initial bound for the manifold. */
    osg::BoundingSphere initialBound() const;

    /** creates a mesh node for a coordinate in manifold profile */
    MeshNode createNode( const osg::Vec3d& manifoldCoord ) const;

public:
    osg::BoundingSphere _bs;
    osg::ref_ptr<const Profile> _profile;
    osg::ref_ptr<const osg::EllipsoidModel> _ellipsoid;
    osg::ref_ptr<Diamond> _vd[8]; // vertex diamonds
    osg::ref_ptr<Diamond> _fd[6]; // face diamonds
    osg::ref_ptr<Diamond> _ed[12]; // edge diamonds

    osg::Vec3d p(double x, double y, double z) const;
};

#endif // OSGEARTH_DROAM_ENGINE_CUBE_MANIFOLD_H
