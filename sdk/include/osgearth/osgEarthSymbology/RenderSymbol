/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHSYMBOLOGY_RENDER_SYMBOL_H
#define OSGEARTHSYMBOLOGY_RENDER_SYMBOL_H 1

#include <osgEarth/Common>
#include <osgEarth/DepthOffset>
#include <osgEarthSymbology/Expression>
#include <osgEarthSymbology/Symbol>
#include <osg/Referenced>
#include <vector>

namespace osgEarth { namespace Symbology
{
    /** 
     * Symbol that contains general rendering settings.
     */
    class OSGEARTHSYMBOLOGY_EXPORT RenderSymbol : public Symbol
    {
    public:
        META_Object(osgEarthSymbology, RenderSymbol);

        /** construct a render symbol */
        RenderSymbol(const Config& conf =Config());
        RenderSymbol(const RenderSymbol& rhs,const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);

        /** whether to perform depth buffer testing */
        optional<bool>& depthTest() { return _depthTest; }
        const optional<bool>& depthTest() const { return _depthTest; }

        /** whether to force lighting on/off */
        optional<bool>& lighting() { return _lighting; }
        const optional<bool>& lighting() const { return _lighting; }

        /** depth offset properties */
        optional<DepthOffsetOptions>& depthOffset() { return _depthOffset; }
        const optional<DepthOffsetOptions>& depthOffset() const { return _depthOffset; }

        /** whether to force backface culling on or off */
        optional<bool>& backfaceCulling() { return _backfaceCulling; }
        const optional<bool>& backfaceCulling() const { return _backfaceCulling; }

        /** applies a rendering order to affected geometry */
        optional<NumericExpression>& order() { return _order; }
        const optional<NumericExpression>& order() const { return _order; }

        /** clip plane number to activate. */
        optional<unsigned>& clipPlane() { return _clipPlane; }
        const optional<unsigned>& clipPlane() const { return _clipPlane; }

        /** discard fragments with alpha < threshold */
        optional<float>& minAlpha() { return _minAlpha; }
        const optional<float>& minAlpha() const { return _minAlpha; }

        /** hint to render in the transparent (depth-sorted) bin */
        optional<bool>& transparent() { return _transparent; }
        const optional<bool>& transparent() const { return _transparent; }

        /** render bin to use for sorting */
        optional<std::string>& renderBin() { return _renderBin; }
        const optional<std::string>& renderBin() const { return _renderBin; }

        /** enable decaling (lequal + polygonoffset) */
        optional<bool>& decal() { return _decal; }
        const optional<bool>& decal() const { return _decal; }

    public:
        virtual Config getConfig() const;
        virtual void mergeConfig( const Config& conf );
        static void parseSLD(const Config& c, class Style& style);

    protected:
        optional<bool>               _depthTest;
        optional<bool>               _lighting;
        optional<DepthOffsetOptions> _depthOffset;
        optional<bool>               _backfaceCulling;
        optional<NumericExpression>  _order;
        optional<unsigned>           _clipPlane;
        optional<float>              _minAlpha;
        optional<std::string>        _renderBin;
        optional<bool>               _transparent;
        optional<bool>               _decal;
        
        /** dtor */
        virtual ~RenderSymbol() { }
    };

} } // namespace osgEarth::Symbology

#endif // OSGEARTHSYMBOLOGY_RENDER_SYMBOL_H
