/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2014 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHUTIL_FEATURE_DRAGGER_TOOL_H
#define OSGEARTHUTIL_FEATURE_DRAGGER_TOOL_H 1

#include <osgEarthUtil/Common>
#include <osgEarthUtil/FeatureQueryTool>
#include <osgEarthFeatures/FeatureDrawSet>
#include <osgEarthAnnotation/CircleNode>
#include <osgEarthAnnotation/AnnotationEditing>
#include <osgEarth/MapNode>
#include <osgEarth/Draggers>
#include <osgEarth/Units>
#include <osgGA/GUIEventHandler>
#include <osg/View>
#include <osg/MatrixTransform>

namespace osgEarth { namespace Util
{
    using namespace osgEarth;
    using namespace osgEarth::Annotation;

    /**
     * Tool that let you select a feature and drag it around.
     */
    class OSGEARTHUTIL_EXPORT FeatureManipTool : public FeatureQueryTool,
                                                 public FeatureQueryTool::Callback
    {
    public:
        /**
         * Constructs a new feature dragger tool.
         */
        FeatureManipTool( MapNode* mapNode, bool verticalEnabled=false );

        /** dtor */
        virtual ~FeatureManipTool() { }

        /**
         * Sets the position of the dragger
         */
        void setPosition( const GeoPoint& pos );

        /**
         * Sets the rotation of the dragger
         */
        void setRotation( const Angle& angle );

        /**
         * Cancels a manipulation in progress
         */
        void cancel();

        /**
         * Commits a manipulation in progress, buring in the new verts.
         */
        void commit();


    public: // FeatureQueryTool::Callback

        virtual void onHit( FeatureSourceIndexNode* index, FeatureID fid, const EventArgs& args );
        virtual void onMiss( const EventArgs& args );


    public: // GUIEventHandler

        virtual bool handle( const osgGA::GUIEventAdapter& ea, osgGA::GUIActionAdapter& aa );


    public: // internal

        void syncToDraggers(bool wasVertical=false);

    protected:

        /**
         * Alters the appearance of the "manipulated" model. Override this method to provide a
         * custom appearance.
         */
        virtual osg::Node* configureManip( osg::Node* node ) const;

        /**
         * Alters the appearance of the "ghost" model. Override this method to provide a
         * custom appearance.
         */
        virtual osg::Node* configureGhost( osg::Node* node ) const;

    protected:
        FeatureDrawSet                     _drawSet;
        osg::ref_ptr<osg::MatrixTransform> _manipModel;
        osg::ref_ptr<osg::Node>            _ghostModel;
        bool                               _verticalEnabled;
        double                             _verticalOffset;
        double                             _verticalDraggerOffset;
        osg::ref_ptr<CircleNode>           _circle;
        osg::ref_ptr<CircleNodeEditor>     _circleEditor;
        osg::ref_ptr<SphereDragger>        _verticalDragger;
        osg::ref_ptr<osg::Group>           _workGroup;
    };

} } // namespace osgEarthUtil

#endif // OSGEARTHUTIL_FEATURE_DRAGGER_TOOL_H
