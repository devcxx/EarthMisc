/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2016 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_STATESET_LOD
#define OSGEARTH_STATESET_LOD

#include <osgEarth/Common>
#include <osg/Group>
#include <osg/StateSet>
#include <vector>

namespace osgEarth
{
    /**
     * Apply statesets based on value ranges. 
     *
     * By default, this class works like osg::LOD and uses the camera's 
     * distance to the bounding center as the value used to select active
     * statesets. You can change the metric by calling setGetValueFunction().
     */
    class OSGEARTH_EXPORT StateSetLOD : public osg::Group
    {
    public:
        StateSetLOD() { }

        /** Adds a stateset to be applied within a value range. */
        void addStateSet(osg::StateSet* stateset, float min, float max);
        
        /** Number of LOD ranges */
        unsigned getNumRanges() const { return (unsigned)_ranges.size(); }

        /** Set the min and max value for a particular range */
        void setRange(unsigned index, float min, float max);

        /** Gets the minimum value for a range */
        float getMinRange(unsigned index) const { return _ranges[index].first; }

        /** Gets the maximum value for a range */
        float getMaxRange(unsigned index) const { return _ranges[index].second; }

        /** Gets the state set at a range */
        osg::StateSet* getStateSet(unsigned index) const { return _stateSets[index].get(); }

    public:
        class GetValue : public osg::Referenced 
        {
        public:
            virtual float operator()(osg::NodeVisitor& nv) = 0;
        };

        /**
         * Sets a custom value generator. By default, the value will be the 
         * distance from the camera to the subgraph's bounding center. But you
         * can get a custom metric by calling this method.
         */
        void setGetValueFunction(GetValue* c) { _getValue = c; }

    public: // osg::Group

        virtual void traverse(osg::NodeVisitor& nv);

    protected:
        virtual ~StateSetLOD() { }
        
        typedef std::pair<float, float> MinMaxPair;
        typedef std::vector<MinMaxPair> RangeList;
        typedef std::vector<osg::ref_ptr<osg::StateSet> > StateSetList;

        RangeList    _ranges;
        StateSetList _stateSets;
        osg::ref_ptr<GetValue> _getValue;
    };


} // namespace osgEarth

#endif //OSGEARTH_STATESET_LOD
