/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_MAPINSPECTOR_EXTENSION
#define OSGEARTH_MAPINSPECTOR_EXTENSION 1

#include <osgEarth/Extension>
#include <osgEarth/MapNode>
#include <osgEarth/MapCallback>
#include <osgEarthUtil/Controls>

namespace osgEarth { namespace MapInspector
{
    using namespace osgEarth;
    using namespace osgEarth::Util::Controls;

    /**
     * Displays visual metadata about the visible layers in a map.
     */
    class MapInspectorExtension : public Extension,
                                  public ExtensionInterface<MapNode>,
                                  public ExtensionInterface<Control>,
                                  public MapCallback //TODO: remove, bad double-inheritance
    {
    public:
        META_Object(osgearth_ext_MapInspector, MapInspectorExtension);

        // CTORs
        MapInspectorExtension();
        MapInspectorExtension(const ConfigOptions& options);

        // DTOR
        virtual ~MapInspectorExtension();


    public: // ExtensionInterface<MapNode>

        bool connect(MapNode* mapNode);

        bool disconnect(MapNode* mapNode);


    public: // ExtensionInterface<Control>

        bool connect(Control* control);

        bool disconnect(Control* control);

        
    public: // MapCallback

        void onMapModelChanged(const MapModelChange& change);


    protected: // Object

        MapInspectorExtension(const MapInspectorExtension& rhs, const osg::CopyOp& op) { }


    private:
        osg::observer_ptr<MapNode> _mapNode;
        osg::ref_ptr<Control>      _ui;

        void ctor();
    };

} } // namespace osgEarth::MapInspector

#endif // OSGEARTH_MAPINSPECTOR_EXTENSION
