/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DRIVER_TEMPLATE_MAT_CLASS_DRIVEROPTIONS
#define OSGEARTH_DRIVER_TEMPLATE_MAT_CLASS_DRIVEROPTIONS 1

#include <osgEarth/Common>
#include <osgEarth/TileSource>
#include <osgEarthFeatures/FeatureSource>

namespace osgEarth { namespace Drivers
{
    using namespace osgEarth;
    using namespace osgEarth::Features;

    /**
     * Options structure for configuring the driver.
     * getConfig() and fromConfig() let you serialize to/from the earth file.
     */
    class TemplateMatClassOptions : public TileSourceOptions // NO EXPORT; header only
    {
    public:
        // Constructor - do not modify
        TemplateMatClassOptions( const TileSourceOptions& options =TileSourceOptions() )
            : TileSourceOptions( options )
        {
            setDriver( "template_matclass" );
            fromConfig( _conf );
        }

        // Source image layer specification
        optional<ImageLayerOptions>& imageLayerOptions() { return _imageLayerOptions; }
        const optional<ImageLayerOptions>& imageLayerOptions() const { return _imageLayerOptions; }

        // Vector feature source specification
        optional<FeatureSourceOptions>& featureSourceOptions() { return _featureSourceOptions; }
        const optional<FeatureSourceOptions>& featureSourceOptions() const { return _featureSourceOptions; }

        // dtor
        virtual ~TemplateMatClassOptions() { }

    public:
        Config getConfig() const {
            Config conf = TileSourceOptions::getConfig();
            conf.addObjIfSet( "image", _imageLayerOptions );
            conf.addObjIfSet( "features", _featureSourceOptions );
            return conf;
        }

    protected:
        void mergeConfig( const Config& conf ) {
            TileSourceOptions::mergeConfig( conf );
            fromConfig(conf);
        }

    private:
        void fromConfig( const Config& conf ) {
            conf.getObjIfSet( "image", _imageLayerOptions );
            conf.getObjIfSet( "features", _featureSourceOptions );
        }

        optional<ImageLayerOptions>    _imageLayerOptions;
        optional<FeatureSourceOptions> _featureSourceOptions;
    };

} } // namespace osgEarth::Drivers

#endif // OSGEARTH_DRIVER_TEMPLATE_MAT_CLASS_DRIVEROPTIONS
